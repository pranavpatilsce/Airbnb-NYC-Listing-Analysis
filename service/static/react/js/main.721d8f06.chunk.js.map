{"version":3,"sources":["svg/airbnblogo.png","topbar/topbar.js","landing.js","results/results.js","serviceWorker.js","index.js"],"names":["module","exports","Topbar","className","href","rel","src","logo","firebase","initializeApp","apiKey","authDomain","HostForm","props","Form","FormGroup","check","Label","Input","type","for","name","id","multiple","Login","state","isSignedIn","uiConfig","signInFlow","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","TwitterAuthProvider","GithubAuthProvider","EmailAuthProvider","callbacks","signInSuccess","componentDidMount","onAuthStateChanged","user","setState","console","log","this","center","Button","color","currentUser","displayName","alt","top","width","photoURL","onClick","signOut","firebaseAuth","React","Component","Landing","Results","target","Boolean","window","location","hostname","match","PredictionRoutes","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,iC,iRCiB5BC,MAbf,WACE,OACE,6BACE,gCACM,yBAAKC,UAAU,UACX,uBAAGC,KAAK,IAAIC,IAAI,uBAAhB,IAAuC,yBAAKC,IAAKC,IAAMJ,UAAU,iBACjE,wBAAIA,UAAU,gBAAd,4B,0ECAhBK,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,0CAGd,IAAMC,EAAW,SAACC,GAEhB,OACE,kBAACC,EAAA,EAAD,KACG,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,CAAOD,OAAK,GACV,kBAACE,EAAA,EAAD,CAAOC,KAAK,aAAc,IAD5B,kDAKH,kBAACJ,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAOG,IAAI,iBAAX,QACA,kBAACF,EAAA,EAAD,CAAOC,KAAK,SAASE,KAAK,SAASC,GAAG,iBACpC,4CACA,iDACA,4CACA,2CACA,2CACA,8CACA,qDACA,6CACA,+CACA,8DACA,8CACA,2CACA,6CACA,sDACA,gDACA,6CACA,2CACA,+CACA,gDACA,+CACA,gDACA,gDACA,6CACA,kDACA,6CACA,oDACA,+CACA,+CACA,4CACA,mDACA,4CACA,mDACA,+CACA,qDACA,8CACA,2CACA,6CACA,+CACA,gDACA,qDACA,gDACA,2CACA,gDACA,8CACA,+CACA,iDACA,+CACA,2CACA,6CACA,qDACA,gDACA,0CACA,gDACA,iDACA,iDACA,oDACA,gDACA,8CACA,qDACA,yCACA,iDACA,iDACA,iDACA,+CACA,mDACA,iDACA,gDACA,+CACA,4CACA,4CACA,4CACA,+CACA,gDACA,gDACA,6CACA,sDACA,4CACA,qDACA,6CACA,4CACA,2CACA,gDACA,+CACA,iDACA,kDACA,iDACA,mDACA,4CACA,2CACA,4CACA,gDACA,8CACA,6CACA,+CACA,8CACA,qDACA,+CACA,0CACA,kDACA,8CACA,0CACA,8CACA,gDACA,gDACA,4CACA,+CACA,0CACA,mDACA,2CACA,mDACA,iDACA,8CACA,+CACA,qDACA,+CACA,4CACA,6CACA,mDACA,gDACA,+CACA,oDACA,4CACA,mDACA,mDACA,+CACA,mDACA,2CACA,2CACA,kDACA,iDACA,2CACA,2CACA,8CACA,uDACA,kDACA,+CACA,8CACA,8CACA,8CACA,8CACA,+CACA,6CACA,4CACA,gDACA,4CACA,kDACA,mDACA,wCACA,0CACA,mDACA,2CACA,2CACA,6CACA,8CACA,8CACA,+CACA,8CACA,kDACA,+CACA,iDACA,gDACA,oDACA,6DACA,kDACA,iDACA,4CACA,6CACA,iDACA,gDACA,6CACA,6CACA,kDACA,oDACA,4CACA,4CACA,6CACA,iDACA,4CACA,kDACA,+CACA,+CACA,wCACA,6CACA,+CACA,oDACA,+CACA,uDACA,kDACA,8CACA,8CACA,6CACA,mDACA,6CACA,+CACA,oDACA,+CACA,6CACA,iDACA,+CACA,2CACA,2CACA,+CACA,6CACA,sDACA,mDACA,mDACA,4CACA,gDACA,6CACA,sDACA,iDACA,8CACA,gDACA,sDACA,+CACA,8CACA,kDACA,gDACA,+CACA,mDACA,6CACA,4CACA,2CACA,8CAGJ,kBAACP,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAOG,IAAI,iBAAX,QACA,kBAACF,EAAA,EAAD,CAAOC,KAAK,SAASE,KAAK,SAASC,GAAG,iBACpC,yCACA,4CACA,6CACA,0CACA,mDAGJ,kBAACP,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAOG,IAAI,iBAAX,gCACA,kBAACF,EAAA,EAAD,CAAOC,KAAK,SAASE,KAAK,SAASC,GAAG,iBACpC,uCACA,wCAGJ,kBAACP,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAOG,IAAI,iBAAX,yDACA,kBAACF,EAAA,EAAD,CAAOC,KAAK,SAASE,KAAK,SAASC,GAAG,iBACpC,uCACA,wCAGJ,kBAACP,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAOG,IAAI,iBAAX,+CACA,kBAACF,EAAA,EAAD,CAAOC,KAAK,SAASE,KAAK,SAASC,GAAG,iBACpC,uCACA,wCAGJ,kBAACP,EAAA,EAAD,KA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","file":"js/main.721d8f06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/airbnblogo.e3829dac.png\";","import React from 'react';\nimport logo from '../svg/airbnblogo.png';\nimport './topbar.css';\n\nfunction Topbar() {\n  return (\n    <div >\n      <header>\n            <div className=\"Topbar\">\n                <a href=\"/\" rel=\"noopener noreferrer\"> <img src={logo} className=\"TopBar-logo\"/></a>\n                <h4 className=\"TopBar-Title\">NYC price prediction</h4>\n            </div>\n      </header>\n    </div>\n  );\n}\n\nexport default Topbar;\n","import React, {Component} from 'react';\nimport logo from './svg/airbnblogo.png';\nimport './landing.css';\nimport TopBar from './topbar/topbar.js';\nimport {Button} from 'reactstrap';\nimport firebase from 'firebase';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\n\nimport { Col, Row, Form, FormGroup, Label, Input } from 'reactstrap';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyAE1dktWDHE2xl9jHA_9B75c2wyBJhFGuI\",\n  authDomain: \"airbnbpriceprediction.firebaseapp.com\"\n})\n\nconst HostForm = (props) => {\n\n  return (\n    <Form>\n       <FormGroup check>\n         <Label check>\n           <Input type=\"checkbox\" />{' '}\n           This listing will offer access to a restroom.\n         </Label>\n       </FormGroup>\n      <FormGroup>\n        <Label for=\"exampleSelect\">Area</Label>\n        <Input type=\"select\" name=\"select\" id=\"exampleSelect\">\n          <option>Allerton</option>\n          <option>Arden Heights</option>\n          <option>Arrochar</option>\n          <option>Arverne</option>\n          <option>Astoria</option>\n          <option>Bath Beach</option>\n          <option>Battery Park City</option>\n          <option>Bay Ridge</option>\n          <option>Bay Terrace</option>\n          <option>Bay Terrace, Staten Island</option>\n          <option>Baychester</option>\n          <option>Bayside</option>\n          <option>Bayswater</option>\n          <option>Bedford-Stuyvesant</option>\n          <option>Belle Harbor</option>\n          <option>Bellerose</option>\n          <option>Belmont</option>\n          <option>Bensonhurst</option>\n          <option>Bergen Beach</option>\n          <option>Boerum Hill</option>\n          <option>Borough Park</option>\n          <option>Breezy Point</option>\n          <option>Briarwood</option>\n          <option>Brighton Beach</option>\n          <option>Bronxdale</option>\n          <option>Brooklyn Heights</option>\n          <option>Brownsville</option>\n          <option>Bull's Head</option>\n          <option>Bushwick</option>\n          <option>Cambria Heights</option>\n          <option>Canarsie</option>\n          <option>Carroll Gardens</option>\n          <option>Castle Hill</option>\n          <option>Castleton Corners</option>\n          <option>Charleston</option>\n          <option>Chelsea</option>\n          <option>Chinatown</option>\n          <option>City Island</option>\n          <option>Civic Center</option>\n          <option>Claremont Village</option>\n          <option>Clason Point</option>\n          <option>Clifton</option>\n          <option>Clinton Hill</option>\n          <option>Co-op City</option>\n          <option>Cobble Hill</option>\n          <option>College Point</option>\n          <option>Columbia St</option>\n          <option>Concord</option>\n          <option>Concourse</option>\n          <option>Concourse Village</option>\n          <option>Coney Island</option>\n          <option>Corona</option>\n          <option>Country Club</option>\n          <option>Crown Heights</option>\n          <option>Cypress Hills</option>\n          <option>Ditmars Steinway</option>\n          <option>Dongan Hills</option>\n          <option>Douglaston</option>\n          <option>Downtown Brooklyn</option>\n          <option>DUMBO</option>\n          <option>Dyker Heights</option>\n          <option>East Elmhurst</option>\n          <option>East Flatbush</option>\n          <option>East Harlem</option>\n          <option>East Morrisania</option>\n          <option>East New York</option>\n          <option>East Village</option>\n          <option>Eastchester</option>\n          <option>Edenwald</option>\n          <option>Edgemere</option>\n          <option>Elmhurst</option>\n          <option>Eltingville</option>\n          <option>Emerson Hill</option>\n          <option>Far Rockaway</option>\n          <option>Fieldston</option>\n          <option>Financial District</option>\n          <option>Flatbush</option>\n          <option>Flatiron District</option>\n          <option>Flatlands</option>\n          <option>Flushing</option>\n          <option>Fordham</option>\n          <option>Forest Hills</option>\n          <option>Fort Greene</option>\n          <option>Fort Hamilton</option>\n          <option>Fort Wadsworth</option>\n          <option>Fresh Meadows</option>\n          <option>Gerritsen Beach</option>\n          <option>Glendale</option>\n          <option>Gowanus</option>\n          <option>Gramercy</option>\n          <option>Graniteville</option>\n          <option>Grant City</option>\n          <option>Gravesend</option>\n          <option>Great Kills</option>\n          <option>Greenpoint</option>\n          <option>Greenwich Village</option>\n          <option>Grymes Hill</option>\n          <option>Harlem</option>\n          <option>Hell's Kitchen</option>\n          <option>Highbridge</option>\n          <option>Hollis</option>\n          <option>Holliswood</option>\n          <option>Howard Beach</option>\n          <option>Howland Hook</option>\n          <option>Huguenot</option>\n          <option>Hunts Point</option>\n          <option>Inwood</option>\n          <option>Jackson Heights</option>\n          <option>Jamaica</option>\n          <option>Jamaica Estates</option>\n          <option>Jamaica Hills</option>\n          <option>Kensington</option>\n          <option>Kew Gardens</option>\n          <option>Kew Gardens Hills</option>\n          <option>Kingsbridge</option>\n          <option>Kips Bay</option>\n          <option>Laurelton</option>\n          <option>Lighthouse Hill</option>\n          <option>Little Italy</option>\n          <option>Little Neck</option>\n          <option>Long Island City</option>\n          <option>Longwood</option>\n          <option>Lower East Side</option>\n          <option>Manhattan Beach</option>\n          <option>Marble Hill</option>\n          <option>Mariners Harbor</option>\n          <option>Maspeth</option>\n          <option>Melrose</option>\n          <option>Middle Village</option>\n          <option>Midland Beach</option>\n          <option>Midtown</option>\n          <option>Midwood</option>\n          <option>Mill Basin</option>\n          <option>Morningside Heights</option>\n          <option>Morris Heights</option>\n          <option>Morris Park</option>\n          <option>Morrisania</option>\n          <option>Mott Haven</option>\n          <option>Mount Eden</option>\n          <option>Mount Hope</option>\n          <option>Murray Hill</option>\n          <option>Navy Yard</option>\n          <option>Neponsit</option>\n          <option>New Brighton</option>\n          <option>New Dorp</option>\n          <option>New Dorp Beach</option>\n          <option>New Springville</option>\n          <option>NoHo</option>\n          <option>Nolita</option>\n          <option>North Riverdale</option>\n          <option>Norwood</option>\n          <option>Oakwood</option>\n          <option>Olinville</option>\n          <option>Ozone Park</option>\n          <option>Park Slope</option>\n          <option>Parkchester</option>\n          <option>Pelham Bay</option>\n          <option>Pelham Gardens</option>\n          <option>Port Morris</option>\n          <option>Port Richmond</option>\n          <option>Prince's Bay</option>\n          <option>Prospect Heights</option>\n          <option>Prospect-Lefferts Gardens</option>\n          <option>Queens Village</option>\n          <option>Randall Manor</option>\n          <option>Red Hook</option>\n          <option>Rego Park</option>\n          <option>Richmond Hill</option>\n          <option>Richmondtown</option>\n          <option>Ridgewood</option>\n          <option>Riverdale</option>\n          <option>Rockaway Beach</option>\n          <option>Roosevelt Island</option>\n          <option>Rosebank</option>\n          <option>Rosedale</option>\n          <option>Rossville</option>\n          <option>Schuylerville</option>\n          <option>Sea Gate</option>\n          <option>Sheepshead Bay</option>\n          <option>Shore Acres</option>\n          <option>Silver Lake</option>\n          <option>SoHo</option>\n          <option>Soundview</option>\n          <option>South Beach</option>\n          <option>South Ozone Park</option>\n          <option>South Slope</option>\n          <option>Springfield Gardens</option>\n          <option>Spuyten Duyvil</option>\n          <option>St. Albans</option>\n          <option>St. George</option>\n          <option>Stapleton</option>\n          <option>Stuyvesant Town</option>\n          <option>Sunnyside</option>\n          <option>Sunset Park</option>\n          <option>Theater District</option>\n          <option>Throgs Neck</option>\n          <option>Todt Hill</option>\n          <option>Tompkinsville</option>\n          <option>Tottenville</option>\n          <option>Tremont</option>\n          <option>Tribeca</option>\n          <option>Two Bridges</option>\n          <option>Unionport</option>\n          <option>University Heights</option>\n          <option>Upper East Side</option>\n          <option>Upper West Side</option>\n          <option>Van Nest</option>\n          <option>Vinegar Hill</option>\n          <option>Wakefield</option>\n          <option>Washington Heights</option>\n          <option>West Brighton</option>\n          <option>West Farms</option>\n          <option>West Village</option>\n          <option>Westchester Square</option>\n          <option>Westerleigh</option>\n          <option>Whitestone</option>\n          <option>Williamsbridge</option>\n          <option>Williamsburg</option>\n          <option>Willowbrook</option>\n          <option>Windsor Terrace</option>\n          <option>Woodhaven</option>\n          <option>Woodlawn</option>\n          <option>Woodrow</option>\n          <option>Woodside</option>\n        </Input>\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"exampleSelect\">City</Label>\n        <Input type=\"select\" name=\"select\" id=\"exampleSelect\">\n          <option>Bronx</option>\n          <option>Brooklyn</option>\n          <option>Manhattan</option>\n          <option>Queens</option>\n          <option>Staten Island</option>\n        </Input>\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"exampleSelect\">Are you an Airbnb superhost?</Label>\n        <Input type=\"select\" name=\"select\" id=\"exampleSelect\">\n          <option>Yes</option>\n          <option>No</option>\n        </Input>\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"exampleSelect\">Are you clearly visible in your Airbnb profile photo?</Label>\n        <Input type=\"select\" name=\"select\" id=\"exampleSelect\">\n          <option>Yes</option>\n          <option>No</option>\n        </Input>\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"exampleSelect\">Is your host identity verified with Airbnb?</Label>\n        <Input type=\"select\" name=\"select\" id=\"exampleSelect\">\n          <option>Yes</option>\n          <option>No</option>\n        </Input>\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"exampleSelect\">How would you describe the room/accommodation in this listing?</Label>\n        <Input type=\"select\" name=\"select\" id=\"exampleSelect\">\n          <option>Entire Home/Apartment</option>\n          <option>Hotel Room</option>\n          <option>Private Room</option>\n          <option>Shared Room</option>\n        </Input>\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"exampleSelect\">Amenities</Label>\n        <Input type=\"select\" name=\"select\" id=\"amenities_select\" multiple>\n            <option>Self check-in</option>\n            <option>Cooking basics</option>\n            <option>Cable TV</option>\n            <option>Oven</option>\n            <option>Microwave</option>\n            <option>Dishes and silverware</option>\n            <option>Bed linens</option>\n            <option>Elevator</option>\n            <option>Family/kid friendly</option>\n            <option>Refrigerator</option>\n            <option>Internet</option>\n            <option>Free street parking</option>\n            <option>First aid kit</option>\n            <option>Lock on bedroom door</option>\n            <option>Fire extinguisher</option>\n            <option>Dryer</option>\n            <option>Washer</option>\n            <option>Hot water</option>\n            <option>Iron</option>\n            <option>Laptop friendly workspace</option>\n            <option>Hair dryer</option>\n            <option>TV</option>\n            <option>Shampoo</option>\n            <option>Carbon monoxide detector</option>\n            <option>Hangers</option>\n            <option>Air Conditioning</option>\n            <option>Smoke detector</option>\n            <option>Kitchen</option>\n            <option>Heating</option>\n            <option>Wifi</option>\n        </Input>\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"exampleSelect\">Bed type</Label>\n        <Input type=\"select\" id=\"bed_type\">\n          <option>Airbed</option>\n          <option>Couch</option>\n          <option>Real Bed</option>\n          <option>Futon</option>\n          <option>Pull-out Sofa</option>\n        </Input>\n      </FormGroup>\n      <FormGroup check>\n        <Label className=\"lead\">The prediction may take upto 5 mins.</Label>\n      </FormGroup>\n    </Form>\n  );\n}\n\nclass Login extends React.Component {\n\n  state = {isSignedIn: false}\n\n  uiConfig = {\n    signInFlow: \"popup\",\n    signInOptions: [\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n      firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n      firebase.auth.GithubAuthProvider.PROVIDER_ID,\n      firebase.auth.EmailAuthProvider.PROVIDER_ID\n    ],\n    callbacks: {\n      signInSuccess: () => false\n    }\n  }\n\n  componentDidMount = () => {\n    firebase.auth().onAuthStateChanged(user => {\n      this.setState({ isSignedIn: !!user})\n      console.log(\"user\", user)\n    })\n  }\n\n  render(){\n    return(\n      <div className=\"Landing\">\n        <div className=\"Landing-header\">\n              {this.state.isSignedIn ?\n              (\n              <div>\n                <HostForm center/>\n                <a href='/results'><Button className=\"Predict-Button\" color=\"success\" >Predict my Airbnb's price!</Button></a>\n                <div className=\"header-buttons\">\n                    <div>\n                      <h1 className=\"display-4\">Welcome {firebase.auth().currentUser.displayName}</h1>\n                      <img alt=\"profile picture\" top width=\"30%\" src={firebase.auth().currentUser.photoURL} />\n                    </div>\n\n                    <div className=\"predict-signout\">\n                      <Button onClick={() => firebase.auth().signOut()}>Sign out!</Button>\n                    </div>\n\n                    {/*<div className=\"predict-next\">\n                      <Button> Predict! </Button>>\n                    </div>*/}\n                </div>\n              </div>\n              )\n              :\n              (\n                <div>\n                  <div className=\"lead\">\n                      <p>Want to predict how much your airbnb listing will be worth?</p>\n                      <p>Gives us the area, type of home, and a few other details. Our ML algorithm will calculate the value of your Airbnb listing!</p>\n                      <p>Log in below and let's get started!</p>\n                  </div>\n                  <div className=\"LogInConsole\">\n                    <StyledFirebaseAuth\n                      uiConfig={this.uiConfig}\n                      firebaseAuth={firebase.auth()}\n                    />\n                  </div>\n                </div>\n              )\n              }\n        </div>\n      </div>\n    )\n  }\n\n}\n\nfunction Landing() {\n  return (\n    <div>\n      <div>\n        <TopBar />\n      </div>\n      <div>\n        <Login />\n      </div>\n    </div>\n  );\n}\n\nexport default Landing;\n\n{/*\n  <div className=\"Landing\">\n    <header className=\"Landing-header\">\n      <img src={logo} className=\"Landing-logo\" alt=\"logo\" />\n      <p>\n        Edit <code>src/landing.js</code> and save to reload.\n      </p>\n  <option>\n        href=\"https://reactjs.org\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Learn React\n      <option>\n    </hea<option>\n  </div>\n  */}\n","import React from 'react';\nimport logo from '../svg/airbnblogo.png';\nimport './results.css';\n\nfunction Results() {\n  return (\n    <div className=\"Results\">\n      <header className=\"Results-header\">\n        <img src={logo} className=\"Results-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/results.js</code> and save to reload.\n        </p>\n        <a\n\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default Results;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Landing from './landing.js';\nimport Results from './results/results.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nclass PredictionRoutes extends React.Component {\n  render(){\n    return(\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Landing} />\n          <Route exact path=\"/results\" component={Results} />\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nReactDOM.render(\n  <PredictionRoutes />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}